#!/bin/sh

PHP_CBF_BIN=dev_vendor/bin/phpcbf
PHP_CBF_CONFIG_START=phpcs.xml
PHP_CBF_CONFIG_END=phpcs-end.xml

PHP_FIX_BIN=dev_vendor/bin/php-cs-fixer
PHP_FIX_CONFIG=.php_cs.dist

PROJECT=$(php -r "echo dirname(dirname(dirname(realpath('$0'))));")
PHP_FILES=$(git diff-index --name-only --cached --diff-filter=ACMRT HEAD -- | egrep '\.php$|\.inc$|\.class$')
FIX_FILES=$(git diff-index --name-only --cached --diff-filter=ACMRT HEAD -- | egrep '\.php$|\.inc$|\.class$|\.css$|\.js$|\.xml$|\.xaml$|\.html$')

# Check if PHP-CS-FIXER is set up correctly
if [ ! -x $PHP_FIX_BIN ]
then
	echo ""
	echo ""
	echo "PHP-CS-FIXER not Found or not Executable ... Aborting"
	echo ""
	exit 1
else
	# Check if PHPCBF is set up correctly
	if [ ! -x $PHP_CBF_BIN ]
	then
		echo ""
		echo ""
   		echo "PHPCBF not Found or not Executable ... Aborting"
		echo ""
		exit 1
	else
		# Lint PHP files if present
		if [ "$PHP_FILES" != "" ]
		then
			echo ""
			echo "Running PHP Lint ..."
			echo ""
			for PHP_FILE in $PHP_FILES
			do
				FILE="$PROJECT/$PHP_FILE"
				RET=$(php -l -d display_errors=0 $FILE)
				if [ $? != 0 ]
				then
					echo ""
					echo "PHP Syntax Errors Found ... Aborting"
					echo ""
					RET=$(git reset HEAD $FILE)
					echo ""
					echo "Please Fix Errors and Repeat Commit"
					echo "Remember to Run 'git add $FILE' before Repeating the Commit"
					echo ""
					exit 1
				fi
			done
		fi

		# Execute PHPCBF & PHP-CS-FIXER
		echo ""
		echo ""
		echo "Fixing Coding Style ..."
		echo ""

		for TARGET_FILE in $FIX_FILES
		do
			FILE="$PROJECT/$TARGET_FILE"
			# Unstage target file
			RET=$(git reset HEAD $FILE)


			# Prepare misc items in target file for PHPCBF and PHP-CS-FIXER
			# 01. Remove all blank lines
			RET=$(perl -i -pe 's/^\s*$//' $FILE)
			# 02. Add blank line after "global or static $XYZ" calls
			RET=$(perl -i -pe 's/^(\s*)(global|static)(\s+)([^;]+;)(.*)$/$1$2 $4\n\n/' $FILE)
			# 03. Add blank line before "$query", "$ret" and "list" calls
			RET=$(perl -i -pe 's/^(\s*)(\$query\s+\.?=|\$ret\s*=|list\()/\n\n$1$2/' $FILE)
			# 04. Add blank line after single line "$query", "$ret" and "list" calls
			RET=$(perl -i -pe 's/^(\s*)(\$query\s+\.?=|\$ret\s+=|list\()([^;]+;)(.*)/$1$2$3$4\n\n/' $FILE)
			# 05. Add blank line after closing braces
			RET=$(perl -i -pe 's/^(\s*)\}(\s*)$/$1\}$2\n\n/' $FILE)
			# 06. Add blank lines before and after "require" and "include" calls
			RET=$(perl -i -pe 's/^(\s*)(require|include)([^;]+;)(.*)$/\n\n$1$2$3$4\n\n/' $FILE)
			# 07. Add blank line after closing multiline statements and strings
			RET=$(perl -i -pe 's/^(\s*)(\)|\x27|");(\s*)$/$1$2;$3\n\n/' $FILE)
			# 08. Add blank line before single line comments
			RET=$(perl -i -pe 's/^(\s*)(\/\/.+?)/\n\n$1$2/' $FILE)
			# 09.  Add blank line before multi line comments
			RET=$(perl -i -pe 's/^(\s*)\/\*/\n\n$1\/\*/' $FILE)
			# 10. Remove blank single line comments
			RET=$(perl -i -pe 's/^(\s*)(\/\/)(\s*)$//' $FILE)
			# 11. Remove blank lines after opening braces
			RET=$(perl -i -0pe 's/\{(\s*\n\s*){1,}(\n\s*)/\{$2/gs' $FILE)
			# 12. Remove blank lines after multiline comments
			RET=$(perl -i -0pe 's/(\s*)(\*\/[^\n]*\n)(\s*\n)/$1$2/gs' $FILE)
			# 13. Add blank line between multi and single line comments
			RET=$(perl -i -0pe 's/(\s*)(\*\/[^\n]*\n)(\s*)(\/\/)/$1$2\n$3$4/gs' $FILE)
			# 14. Add blank line between single and multi line comments
			RET=$(perl -i -0pe 's/(\s*)(\/\/[^\n]+\n)(\s*)(\/\*[^\n]*\n)/$1$2\n\n$3$4/gs' $FILE)
			# 15. Remove blank lines after single line comments
			RET=$(perl -i -0pe 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gs' $FILE)
			RET=$(perl -i -0pe 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gs' $FILE)
			# 16. Separate multiline comment blocks
			RET=$(perl -i -pe 's/(\s*)\*\/\/\*/$1\*\/\n\n\/\*/' $FILE)
			RET=$(perl -i -0pe 's/(\s*)\*\/(\n\s*)\/\*/$1\*\/\n\n$2\/\*/gs' $FILE)
			RET=$(perl -i -0pe 's/(\s*)\*\/(\n\s*)\/\*/$1\*\/\n\n$2\/\*/gs' $FILE)
			# 17. Remove blank lines after switch case
			RET=$(perl -i -0pe 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gs' $FILE)
			RET=$(perl -i -0pe 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gs' $FILE)
			# 18. Remove excess blank lines
			RET=$(perl -i -0pe 's/(\n\s*){2,}(\n\s*)/\n$2/gs' $FILE)
			RET=$(perl -i -0pe 's/(\n\s*){2,}(\n\s*)/\n$2/gs' $FILE)


			# Apply coding style to target file
			RET=$($PHP_CBF_BIN --standard=$PHP_CBF_CONFIG_START $FILE)
			RET=$($PHP_FIX_BIN fix --config "$PHP_FIX_CONFIG" $FILE)
			RET=$($PHP_CBF_BIN --standard=$PHP_CBF_CONFIG_END $FILE)


			# Catch misc items in target file not covered by PHPCBF or PHP-CS-FIXER
			# 01. Standardise Assignment by Reference
			RET=$(perl -i -pe 's/=& \s*/=& /' $FILE)
			# 02. Close empty braces on same line
			RET=$(perl -i -0pe 's/\{\n(\s*)\}([^\w]*)/{}$2/gs' $FILE)
			# 03. Remove blank lines between consecutive "require" and/or "include" calls
			RET=$(perl -i -0pe 's/(\s*)(require|include)([^;]+;.*)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gs' $FILE)
			RET=$(perl -i -0pe 's/(\s*)(require|include)([^;]+;.*)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gs' $FILE)


			# Stage target file
			git add $FILE
		done

		# Check for staged changes and abort if none
		RET=$(git diff --cached)

		if [ "$RET" == "" ]
		then
			echo ""
			echo "NOTE: Commit Emptied After Style Fix ... Aborting"
			echo ""
			exit 1
		fi

		# Completed
		echo ""
		echo ""
		echo "Coding Style Fixed"
		echo ""
		echo ""
	fi
fi
