#!/bin/sh

PHP_CBF_BIN=dev_vendor/bin/phpcbf
PHP_CBF_CONFIG_START=phpcs.xml
PHP_CBF_CONFIG_END=phpcs-end.xml

PHP_FIX_BIN=dev_vendor/bin/php-cs-fixer
PHP_FIX_CONFIG=.php_cs.dist

PROJECT=$(php -r "echo dirname(dirname(dirname(realpath('$0'))));")
STAGED_PHP_FILES=$(git diff-index --name-only --cached --diff-filter=ACMRT HEAD -- | egrep '\.php$|\.inc$|\.class$')
STAGED_FIX_FILES=$(git diff-index --name-only --cached --diff-filter=ACMRT HEAD -- | egrep '\.php$|\.inc$|\.class$|\.css$|\.js$|\.xml$|\.xaml$|\.html$')

# Get file list
if [ "$#" -eq 1 ]
then
	oIFS=$IFS
	IFS='
	'
	FILE_LIST="$1"
	IFS=$oIFS
fi

# Filter file list
PHP_FILES=${FILE_LIST:-$STAGED_PHP_FILES}
ALL_FILES=${FILE_LIST:-$STAGED_FIX_FILES}

# Lint PHP files if present
if [ "$PHP_FILES" != "" ]
then
	echo ""
	echo "Running PHP Lint ..."
	echo ""
	for PHP_FILE in $PHP_FILES
	do
		RET=$(php -l -d display_errors=0 $PROJECT/$PHP_FILE)
		if [ $? != 0 ]
		then
			echo ""
			echo "PHP Syntax Errors Found ... Aborting"
			echo ""
			RET=$(git reset HEAD $PROJECT/$PHP_FILE)
			echo ""
			echo "Please Fix Errors and Repeat Commit"
			echo "Remember to Run 'git add $PROJECT/$PHP_FILE' before Repeating the Commit"
			echo ""
			exit 1
		fi
	done
fi

# Check if PHP-CS-FIXER is set up correctly
if [ ! -x $PHP_FIX_BIN ]
then
	echo ""
	echo ""
	echo "PHP-CS-FIXER not Found or not Executable ... Aborting"
	echo ""
	exit 1
else
	# Check if PHPCBF is set up correctly
	if [ ! -x $PHP_CBF_BIN ]
	then
		echo ""
		echo ""
   		echo "PHPCBF not Found or not Executable ... Aborting"
		echo ""
		exit 1
	else
		# Execute PHPCBF & PHP-CS-FIXER
		echo ""
		echo ""
		echo "Fixing Coding Style ..."
		echo ""
		for TARGET_FILE in $ALL_FILES
		do
			# Unstage target file
			RET=$(git reset HEAD $PROJECT/$TARGET_FILE)


			# Prepare misc items in target file for PHPCBF and PHP-CS-FIXER
			# 01. Add blank line after "global $XYZ" calls
			RET=$(perl -i -pe 's/^(\s*)global(\s)(.+);(\s*)$/$1global $3;\n\n\n/' $PROJECT/$TARGET_FILE)
			# 02. Add blank line before "$query" calls
			RET=$(perl -i -pe 's/^(\s*)\$query (\.?=)/\n$1\$query $2/' $PROJECT/$TARGET_FILE)
			# 03. Add blank line before "$ret" calls
			RET=$(perl -i -pe 's/^(\s*)\$ret =/\n$1\$ret =/' $PROJECT/$TARGET_FILE)
			# 04. Add blank line after single line "$ret" calls
			RET=$(perl -i -pe 's/^(\s*)\$ret(.+);(\s*)$/$1\$ret$2;\n/' $PROJECT/$TARGET_FILE)
			# 05. Add blank line before "list" calls
			RET=$(perl -i -pe 's/^(\s*)list\(/\n$1list(/' $PROJECT/$TARGET_FILE)
			# 06. Add blank line after single line "list" calls
			RET=$(perl -i -pe 's/^(\s*)list(.+);(\s*)$/$1list$2;\n/' $PROJECT/$TARGET_FILE)
			# 07. Add blank line after closing braces
			RET=$(perl -i -pe 's/^(\s*)\}(\s*)$/$1\}$2\n/' $PROJECT/$TARGET_FILE)
			# 08. Add blank line after closing multiline statements
			RET=$(perl -i -pe 's/^(\s*)\);(\s*)$/$1\);$2\n/' $PROJECT/$TARGET_FILE)
			# 09. Remove excess blank lines
			RET=$(perl -i -0pe 's/(\n\s*){2,}(\n\s*)/\n$2/gs' $PROJECT/$TARGET_FILE)
			# 10. Remove blank lines after single line comments
			RET=$(perl -i -0pe 's/(\s+)(\/\/[^\n]+\n)(\s*\n)/$1$2/gs' $PROJECT/$TARGET_FILE)
			# 11. Remove blank lines after multiline comments
			RET=$(perl -i -0pe 's/(\s*)(\*\\[^\n]+\n)(\s*\n)/$1$2/gs' $PROJECT/$TARGET_FILE)
			# 12. Remove blank lines after opening braces
			RET=$(perl -i -0pe 's/\{(\n\s*){2,}(\n\s*)/\{$2/gs' $PROJECT/$TARGET_FILE)


			# Apply coding style to target file
			RET=$($PHP_CBF_BIN --standard=$PHP_CBF_CONFIG_START $PROJECT/$TARGET_FILE)
			RET=$($PHP_FIX_BIN fix --config "$PHP_FIX_CONFIG" $PROJECT/$TARGET_FILE)
			RET=$($PHP_CBF_BIN --standard=$PHP_CBF_CONFIG_END $PROJECT/$TARGET_FILE)


			# Catch misc items in target file not covered by PHPCBF or PHP-CS-FIXER
			# 01. Close empty braces on opening line
			RET=$(perl -i -0pe 's/\{\n(\s*)\}/{}/gs' $PROJECT/$TARGET_FILE)
			# 02. Ensure blank line before "Fall Through"
			RET=$(perl -i -pe 's/(\s+)(\/\/ Fall Through)/\n$1$2/' $PROJECT/$TARGET_FILE)


			# Stage target file
			git add $PROJECT/$TARGET_FILE
		done

		# Check for staged changes and abort if none
		RET=$(git diff --cached)

		if [ "$RET" == "" ]
		then
			echo ""
			echo "NOTE: Commit Emptied After Style Fix ... Aborting"
			echo ""
			exit 1
		fi

		# Completed
		echo ""
		echo ""
		echo "Coding Style Fixed"
		echo ""
		echo ""
	fi
fi
