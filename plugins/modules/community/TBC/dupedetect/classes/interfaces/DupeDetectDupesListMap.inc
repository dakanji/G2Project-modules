<?php

/*
 * $RCSfile: ClassCode.xsl,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @package ImageBlock
 * @subpackage ClassInterfaces
 * @version $Revision: 1.29 $ $Date: 2005/02/01 05:54:27 $
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Interface class for the DupeDetectDupesListMap class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @package ImageBlock
 * @subpackage Classes
 */
class DupeDetectDupesListMap extends DupeDetectDupesListMap_core {
	/**
	 * Return the name of this class with the proper mix of uppercase and
	 * lowercase (get_class() always returns lowercase)
	 *
	 * @return string class name
	 */
	public function getClassName() {
		return 'DupeDetectDupesListMap';
	}

	/**
	 * Return the path to the PHP file for this class, relative to the gallery2 dir
	 *
	 * @return string path
	 */
	public function getClassFile() {
		return 'modules/'
			. basename(dirname(dirname(dirname(__FILE__))))
			. '/classes/DupeDetectDupesListMap.class';
	}

	/**
	 * Get meta information about this class' map
	 *
	 * @return array map member => type
	 */
	public function getMapInfo() {
		$info                          = array();
		$info['members']['srcItemId']  = STORAGE_TYPE_INTEGER;
		$info['members']['dupItemId']  = STORAGE_TYPE_INTEGER;
		$info['members']['dupType']    = STORAGE_TYPE_INTEGER;
		$info['members']['userStatus'] = STORAGE_TYPE_INTEGER;

		return $info;
	}

	/**
	 * Add an entry to this map
	 *
	 * @param array an associative array of the entry data
	 * @return object GalleryStatus a status code
	 * @static
	 */
	public function addMapEntry($data) {
		global $gallery;

		foreach (array(
			'srcItemId',
			'dupItemId',
			'dupType',
			'userStatus',
		) as $key) {
			if (!array_key_exists($key, $data)) {
				return GalleryStatus::error(
					ERROR_BAD_PARAMETER,
					__FILE__,
					__LINE__,
					'Missing parameter: ' . $key
				);
			}
		}

		$storage =& $gallery->getStorage();
		$ret     = $storage->addMapEntry('DupeDetectDupesListMap', $data);

		if ($ret->isError()) {
			return $ret;
		}

		return GalleryStatus::success();
	}

	/**
	 * Remove an entry from this map
	 *
	 * @param array an associative array of the entry data to match and remove
	 * @return object GalleryStatus a status code
	 * @static
	 */
	public function removeMapEntry($data) {
		global $gallery;

		if (sizeof($data) == 0) {
			return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
		}

		$storage =& $gallery->getStorage();
		$ret     = $storage->removeMapEntry('DupeDetectDupesListMap', $data);

		if ($ret->isError()) {
			return $ret;
		}

		return GalleryStatus::success();
	}

	/**
	 * Remove ALL entries from this map.. use with caution!
	 *
	 * @return object GalleryStatus a status code
	 * @static
	 */
	public function removeAllMapEntries() {
		global $gallery;

		$storage =& $gallery->getStorage();
		$ret     = $storage->removeAllMapEntries('DupeDetectDupesListMap');

		if ($ret->isError()) {
			return $ret;
		}

		return GalleryStatus::success();
	}

	/**
	 * Update an entry in this map
	 *
	 * @param array the entry to match
	 * @param array the values to change
	 * @return object GalleryStatus a status code
	 * @static
	 */
	public function updateMapEntry($match, $change) {
		global $gallery;

		if (sizeof($match) == 0 || sizeof($change) == 0) {
			return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
		}

		$storage =& $gallery->getStorage();
		$ret     = $storage->updateMapEntry('DupeDetectDupesListMap', $match, $change);

		if ($ret->isError()) {
			return $ret;
		}

		return GalleryStatus::success();
	}
}
