<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * This plugin handles selecting transcoding options for video
 * @package Transcode
 * @subpackage UserInterface
 * @author Don Willingham <donwillingham@users.sf.net>
 * @version $Revision:$
 */
class TranscodeHelper {
	/**
	 * Get the movie properties
	 * @param object GalleryDataItem $item
	 * @return array object GalleryStatus a status code
	 *               int width
	 *               int height
	 *               float frames per second
	 *               int audio sample rate (Hz)
	 *               int audio channels
	 * @access private
	 */
	public function _getProperties(&$item) {
		list($ret, $path) = $item->fetchPath();

		if ($ret) {
			return array($ret, null);
		}

		$width = $height                = $duration                = $vframerate                = $videoBitrate                = $asamplerate                = $achannels                = $audiodatarate                = 0;

		list($ret, $toolkit1) = GalleryCoreApi::getToolkitByProperty($item->getMimeType(), 'dimensions');

		if (!$ret && isset($toolkit1)) {
			list($ret, $width, $height, $duration, $vframerate, $videoBitrate, $asamplerate, $achannels, $audiodatarate) = $toolkit1->getProperty($item->getMimeType(), 'all', $path);
		}

		// Get dimensions (width x height)
		/*No need to call ffmpeg 5 times
		$width = $height = -1;

		list($ret, $toolkit1) = GalleryCoreApi::getToolkitByProperty($item->getMimeType(), 'dimensions');

		if (!$ret && isset($toolkit1)) {
			list($ret, $result) = $toolkit1->getProperty($item->getMimeType(), 'dimensions', $path);

			if (!$ret) {
				$width = $result[0];
				$height = $result[1];
			}
		}

		/* Get video-framerate (frames per second) */

		/*
		$fps = 0;

		list($ret, $toolkit2) = GalleryCoreApi::getToolkitByProperty($item->getMimeType(), 'video-framerate');

		if (!$ret && isset($toolkit2)) {
			list($ret, $result) = $toolkit2->getProperty($item->getMimeType(), 'video-framerate', $path);

			if (!$ret) {
				$fps = $result[0];
			}
		}

		/* Get audio-samplerate (samples per second, Hz) */

		/*
		$asr = 0;

		list($ret, $toolkit3) = GalleryCoreApi::getToolkitByProperty($item->getMimeType(), 'audio-samplerate');

		if (!$ret && isset($toolkit3)) {
			list($ret, $result) = $toolkit3->getProperty($item->getMimeType(), 'audio-samplerate', $path);

			if (!$ret) {
				$asr = $result[0];
			}
		}

		/* Get audio-channels */

		/*
		$chans = 0;

		list($ret, $toolkit4) = GalleryCoreApi::getToolkitByProperty($item->getMimeType(), 'audio-channels');

		if (!$ret && isset($toolkit4)) {
			list($ret, $result) = $toolkit4->getProperty($item->getMimeType(), 'audio-channels', $path);

			if (!$ret) {
				$chans = $result[0];
			}
		}

		/* Get video-bitrate (kb/s) */

		/*
		$vbr = 0;

		list($ret, $toolkit5) = GalleryCoreApi::getToolkitByProperty($item->getMimeType(), 'video-bitrate');

		if (!$ret && isset($toolkit5)) {
			list($ret, $result) = $toolkit5->getProperty($item->getMimeType(), 'video-bitrate', $path);

			if (!$ret) {
				$vbr = $result[0];
			}
		}

		*/
		return array(null, $width, $height, $vframerate, $videoBitrate, $asamplerate, $achannels, $audiodatarate);
	}

	public function _getMovieDerivative($item) {
		$itemId = $item->getId();

		list($ret, $derivatives) = GalleryCoreApi::fetchPreferredsByItemIds(array($itemId));

		if ($ret) {
			return array($ret, null);
		}

		if (isset($derivatives[$itemId])) {
			foreach ($derivatives as $derivative) {
				$op = strstr($derivative->getDerivativeOperations(), 'convert-to-/');
				if (strlen($op) > 0) {
					return array(null, $derivative);
				}
			}
		}
	}
}
