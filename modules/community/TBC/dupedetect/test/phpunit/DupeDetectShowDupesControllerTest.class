<?php
/*
 * $RCSfile: DupeDetectShowDupesControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision: 0.9 $ $Date: 2005/08/21 05:46:22 $
 * @package DupeDetect
 * @subpackage PHPUnit
 * @author Aviad Tsherniak <tshernia@tau.ac.il>
 */

/**
 * Load required classes
 */
GalleryCoreApi::requireOnce('modules/dupedetect/classes/DupeDetectHelper.class');/**
 * DupeDetectShowDupes Controller tests
 *
 * @package DupeDetect
 * @subpackage PHPUnit
 */
class DupeDetectShowDupesControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'dupedetect.DupeDetectShowDupes');
	}

	public function setUp() {
		parent::setUp();
	}

	public function tearDown() {
		parent::tearDown();
	}

	/**
	 * tests the form when submit by the 'reset' button
	 */
	public function testReset() {
		GalleryUtilities::putRequestVariable('form[action][reset]', '1');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results,
			'wrong results on Reset'
		);
	}

	/**
	 * submit form when no dupe pairs are present
	 */
	public function testSubmitNoPairs() {
		GalleryUtilities::putRequestVariable('form[action][submit]', '1');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						'count' => 0,
					),
					'linked' => array(
						'count' => 0,
					),
					'deleted' => array(
						'count' => 0,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);
	}

	/**
	 * tests submitting the form with one dupe pair with the action 'leaveAsIs'
	 */
	public function testSubmitDoNothing() {
		list($ret, $pair) = $this->_createTestPair();

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', '1');
		GalleryUtilities::putRequestVariable('form[pairs][0]', $pair['srcItemId'] . ',' . $pair['dupItemId']);
		GalleryUtilities::putRequestVariable('form[actions][0]', 'leaveAsIs');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						'count' => 0,
					),
					'linked' => array(
						'count' => 0,
					),
					'deleted' => array(
						'count' => 0,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);

		$ret = $this->_cleanTestPair($pair);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}
	}

	/**
	 * tests submitting the form with one dupe pair with the action 'ignore'
	 */
	public function testSubmitIgnore() {
		list($ret, $pair) = $this->_createTestPair();

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', '1');
		GalleryUtilities::putRequestVariable('form[pairs][0]', $pair['srcItemId'] . ',' . $pair['dupItemId']);
		GalleryUtilities::putRequestVariable('form[actions][0]', 'ignore');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						0       => 0,
						'count' => 1,
					),
					'linked' => array(
						'count' => 0,
					),
					'deleted' => array(
						'count' => 0,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);

		// check that the pair was indeed marked as ignored
		list($ret, $dupes) = DupeDetectHelper::getDupePairs($pair['srcItemId'], $pair['dupItemId']);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		$this->assertEquals(count($dupes), 1);
		$this->assertEquals((int)$dupes[0]['userStatus'], DUPEDETECT_IGNORED_DUPLICATE);

		// clean up
		$ret = $this->_cleanTestPair($pair);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}
	}

	/**
	 * tests submitting the form with one dupe pair with the actions 'deleteSrc'
	 * 'deleteDup'
	 */
	public function testSubmitDelete() {
		// get a test dupe pair
		list($ret, $pair) = $this->_createTestPair();

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', '1');
		GalleryUtilities::putRequestVariable('form[pairs][0]', $pair['srcItemId'] . ',' . $pair['dupItemId']);
		GalleryUtilities::putRequestVariable('form[actions][0]', 'deleteSrc');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						'count' => 0,
					),
					'linked' => array(
						'count' => 0,
					),
					'deleted' => array(
						0       => $pair['srcItemId'],
						'count' => 1,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);

		// check that item1 was indeed deleted
		$ret = $this->_verifyMissing($this->_item1->getId());
		$this->assert($ret->isError() == false, 'item still exists');

		// clean up
		$ret = $this->_cleanTestPair($pair);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		// get a test dupe pair
		list($ret, $pair) = $this->_createTestPair();

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		GalleryUtilities::removeFormVariables('form');

		GalleryUtilities::putRequestVariable('form[action][submit]', '1');
		GalleryUtilities::putRequestVariable('form[pairs][0]', $pair['srcItemId'] . ',' . $pair['dupItemId']);
		GalleryUtilities::putRequestVariable('form[actions][0]', 'deleteDup');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						'count' => 0,
					),
					'linked' => array(
						'count' => 0,
					),
					'deleted' => array(
						0       => $pair['dupItemId'],
						'count' => 1,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);

		// check that item1 was indeed deleted
		$ret = $this->_verifyMissing($this->_item2->getId());
		$this->assert($ret->isError() == false, 'item still exists');

		// clean up
		$ret = $this->_cleanTestPair($pair);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}
	}

	/**
	 * tests submitting the form with one dupe pair with the actions 'linkToSrc'
	 * and 'linkToDup'
	 */
	public function testSubmitLink() {
		// get a test dupe pair
		list($ret, $pair) = $this->_createTestPair();

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', '1');
		GalleryUtilities::putRequestVariable('form[pairs][0]', $pair['srcItemId'] . ',' . $pair['dupItemId']);
		GalleryUtilities::putRequestVariable('form[actions][0]', 'linkToSrc');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						'count' => 0,
					),
					'linked' => array(
						0       => 0,
						'count' => 1,
					),
					'deleted' => array(
						'count' => 0,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);

		// check that item2 was indeed deleted
		$ret = $this->_verifyMissing($this->_item2->getId());
		$this->assert($ret->isError() == false, 'item still exists');

		// check that there is indeed an item linked to item1
		list($ret, $linkedItems) = GalleryCoreApi::fetchEntitiesLinkedTo($this->_item1->getId());

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		$this->assertEquals(count($linkedItems), 1);

		// clean up
		$ret = $this->_cleanTestPair($pair);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		// get a test dupe pair
		list($ret, $pair) = $this->_createTestPair();

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		// now test 'linkToDup'
		GalleryUtilities::removeFormVariables('form');

		GalleryUtilities::putRequestVariable('form[action][submit]', '1');
		GalleryUtilities::putRequestVariable('form[pairs][0]', $pair['srcItemId'] . ',' . $pair['dupItemId']);
		GalleryUtilities::putRequestVariable('form[actions][0]', 'linkToDup');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dupedetect.DupeDetectShowDupes',
				),
				'status'   => array(
					'ignored' => array(
						'count' => 0,
					),
					'linked' => array(
						0       => 0,
						'count' => 1,
					),
					'deleted' => array(
						'count' => 0,
					),
				),
				'error'    => array(),
			),
			$results,
			'wrong results on Submit of empty form'
		);

		// check that item2 was indeed deleted
		$ret = $this->_verifyMissing($this->_item1->getId());
		$this->assert($ret->isError() == false, 'item still exists');

		// check that there is indeed an item linked to item1
		list($ret, $linkedItems) = GalleryCoreApi::fetchEntitiesLinkedTo($this->_item2->getId());

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		$this->assertEquals(count($linkedItems), 1);

		// clean up
		$ret = $this->_cleanTestPair($pair);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}
	}

	/* upload two test images into a test album,
	 * create a dupe pair for the two images
	 * returns a dupRecord
	 *
	 * need to use _cleanTestPair() afterwards to clean up
	 */
	public function _createTestPair() {
		// Create a container album for any data items we create
		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret->isError()) {
			echo $ret->getAsHtml();

			return $this->failWithStatus($ret);
		}

		// acquire locks for the test album
		list($ret, $this->_lockIds) = GalleryCoreApi::acquireReadLock($this->_album->getId());

		if ($ret->isError()) {
			echo $ret->getAsHtml();

			return $this->failWithStatus($ret);
		}

		// upload test image
		$title = '_test_dupedetect_' . mt_rand();
		$path  = dirname(__FILE__) . '/../data/100.jpg';

		list($ret, $this->_item1) = GalleryCoreApi::addItemToAlbum(
			$path,
			$title,
			$title,
			'',
			'',
			'image/jpeg',
			$this->_album->getId(),
			false
		);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		// upload test image
		$title = '_test_dupedetect_' . mt_rand();
		$path  = dirname(__FILE__) . '/../data/50.jpg';

		list($ret, $this->_item2) = GalleryCoreApi::addItemToAlbum(
			$path,
			$title,
			$title,
			'',
			'',
			'image/jpeg',
			$this->_album->getId(),
			false
		);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		// create a list of dupe pairs
		$pairsList               = array();
		$dupRecord               = array();
		$dupRecord['srcItemId']  = $this->_item1->getId();
		$dupRecord['dupItemId']  = $this->_item2->getId();
		$dupRecord['dupType']    = DUPEDETECT_HISTOGRAM_ALGORITHM;
		$dupRecord['userStatus'] = DUPEDETECT_UNHANDLED_DUPLICATE;

		// fetch entities from IDs
		$allIds = array($this->_item1->getId(), $this->_item2->getId());

		list($ret, $entities) = GalleryCoreApi::loadEntitiesById($allIds);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		$this->assert(count($entities) == 2, 'didn\'t get 2 entities');

		$dupRecord['srcItem'] = $entities[0];
		$dupRecord['dupItem'] = $entities[1];

		// get thumbnails
		list($ret, $thumbnails) = GalleryCoreApi::fetchThumbnailsByItemIds($allIds);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		$dupRecord['srcItemData'] = $dupRecord['srcItem']->getMemberData();
		// attach thumbnail
		if (isset($thumbnails[$dupRecord['srcItemId']])) {
			$thumbnail = $thumbnails[$dupRecord['srcItemId']];

			list($ret, $thumbnail) = GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($thumbnail->getId());

			if ($ret->isError()) {
				// Ignore thumbnail errors
			} else {
				$dupRecord['srcItemData']['thumbnail'] = $thumbnail->getMemberData();
			}
		}

		$dupRecord['dupItemData'] = $dupRecord['dupItem']->getMemberData();
		// attach thumbnail
		if (isset($thumbnails[$dupRecord['dupItemId']])) {
			$thumbnail = $thumbnails[$dupRecord['dupItemId']];

			list($ret, $thumbnail) = GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($thumbnail->getId());

			if ($ret->isError()) {
				// Ignore thumbnail errors
			} else {
				$dupRecord['dupItemData']['thumbnail'] = $thumbnail->getMemberData();
			}
		}

		$dupRecord['pairId'] = count($pairsList);
		$pairsList[]         = $dupRecord;

		// add a real dupe pair record to map
		list($ret, $count) = DupeDetectHelper::addDupes(
			$this->_item1->getId(),
			array(array($this->_item2->getId(), 1))
		);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		return array(GalleryStatus::success(), $dupRecord);
	}

	public function _cleanTestPair($pair) {
		// don't delete if already deleted
		$ret = $this->_verifyMissing($this->_item1->getId());

		if ($ret->isError()) {
			$this->_markForCleanup($this->_item1);
		}

		$ret = $this->_verifyMissing($this->_item2->getId());

		if ($ret->isError()) {
			$this->_markForCleanup($this->_item2);
		}

		$this->_markForCleanup($this->_album);

		$ret = DupeDetectHelper::deleteDupes($pair['srcItemId']);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		$ret = GalleryCoreApi::releaseLocks($this->_lockIds);

		if ($ret->isError()) {
			return $this->failWithStatus($ret);
		}

		return GalleryStatus::success();
	}
}
